//doc 4
    
CREATE TYPE Account_t AS OBJECT (
accNo INTEGER,
accName VARCHAR2(50),
balance FLOAT
) NOT FINAL NOT INSTANTIABLE;
/
CREATE TYPE Savings_t UNDER Account_t (
interest_rate FLOAT
);
/
CREATE TYPE Current_t UNDER Account_t (
No_cheques_issued INTEGER
);
/
CREATE TYPE Account_Ref_t AS OBJECT (
account REF Account_t
);
/
CREATE TYPE Account_Ref_tbl AS TABLE OF Account_Ref_t;
/
CREATE TYPE Customer_t AS OBJECT (
nic CHAR(10),
name VARCHAR2(50),
accounts Account_Ref_tbl 
); 
/
CREATE TABLE Accounts OF Account_t (PRIMARY KEY(accNo));
CREATE TABLE Customers OF Customer_t (PRIMARY KEY (nic)) NESTED TABLE accounts STORE AS 
st_acc_tbl;
INSERT INTO Accounts VALUES (Savings_t(10, 'Ran Surakum', 1000000, 4.5));
INSERT INTO Accounts VALUES (Current_t(4, 'Normal Checking', 23490.0, 156));
INSERT INTO Accounts VALUES (Savings_t(2, 'Ran Surakum', 12000, 4.5));
INSERT INTO Accounts VALUES (Current_t(12, 'Business Account', 234521.33, 1347));
INSERT INTO Customers VALUES ('1234567890', 'Mr. Suraweeraratne', 
Account_Ref_tbl (
Account_Ref_t((select REF(a1) from Accounts a1 where a1.accNo = 10)),
Account_Ref_t((select REF(a2) from Accounts a2 where a2.accNo = 4))
)
);
INSERT INTO Customers VALUES ('1232267890', 'Mr. Peiris',
Account_Ref_tbl(
Account_Ref_t((select REF(a) from Accounts a where a.accNo = 2))
)
);
INSERT INTO Customers VALUES ('1232288890', 'Mr. Wijetunga',
Account_Ref_tbl(
Account_Ref_t((select REF(a) from Accounts a where a.accNo = 12))
)
);
Question 1
Consider the Bank database script. Execute it to create the appropriate 
schema required for the practical test. 
Write Oracle’s Object SQL statements to the following:
Find the customers who have 2 or more accounts. Print the nic of the 
customer.
To find the customers who have 2 or more accounts, you can use Oracle's Object SQL with 
nested table functions to count the number of accounts for each customer. Here's how you can 
write the query:
SELECT c.nic
FROM Customers c
WHERE (SELECT COUNT(*) FROM TABLE(c.accounts)) >= 2;
This query selects the NIC (National Identity Card) of customers who have two or more accounts. 
The TABLE() function is used to treat the nested table c.accounts as if it were a database table, 
allowing us to use standard SQL functions like COUNT() on it. We then compare the count of 
accounts for each customer with 2. If the count is greater than or equal to 2, the customer's NIC 
is included in the result set.
Question 2
Create a map member function (called compare) for Account type that 
compares the accNo's.
To create a map member function named compare for the Account_t type that compares the
accNo attribute, you can define it within the type definition. Here's how you can do it:
CREATE TYPE Account_t AS OBJECT (
 accNo INTEGER,
 accName VARCHAR2(50),
 balance FLOAT,
 MEMBER FUNCTION compare RETURN INTEGER
) NOT FINAL NOT INSTANTIABLE;
CREATE TYPE BODY Account_t AS
 MEMBER FUNCTION compare RETURN INTEGER IS
 BEGIN
 RETURN self.accNo;
 END compare;
END;
/
In the above code:
• We added a member function named compare to the Account_t type.
• This member function returns the accNo attribute value.
• The member function is implemented in the type body section.
Now, you can use this member function to compare accNo values of different Account_t
objects. For example:
DECLARE
 acc1 Account_t := Account_t(10, 'Savings Account', 5000.0);
 acc2 Account_t := Account_t(5, 'Checking Account', 10000.0);
 result INTEGER;
BEGIN
 result := acc1.compare();
 DBMS_OUTPUT.PUT_LINE('acc1 accNo: ' || result);
 result := acc2.compare();
 DBMS_OUTPUT.PUT_LINE('acc2 accNo: ' || result);
END;
/
This will output:
acc1 accNo: 10
acc2 accNo: 5
Showing that the compare member function returns the accNo attribute value for each account.
Question 3
Use the method above to print account is ascending order. Oracle must call 
your map method.
To print the accounts in ascending order using the map method compare, you can utilize a SQL 
query with the ORDER BY clause, specifying the compare method as the sorting criterion. 
Here's how you can do it:
SELECT a.account.accNo, a.account.accName, a.account.balance
FROM Customers c,
 TABLE(c.accounts) a
ORDER BY a.account.compare();
In this query:
Customers c is the table alias for the Customers table.
TABLE(c.accounts) a is used to treat the nested table accounts as a relational table with alias a.
a.account.accNo, a.account.accName, and a.account.balance are the attributes of the Account 
object accessed through the nested table.
ORDER BY a.account.compare() orders the results based on the result of the compare
method, which is a member function defined in the Account type. This implicitly calls the 
compare method for each account and sorts the results accordingly.
Running this query will print the accounts in ascending order based on their accNo, utilizing the 
compare method defined for the Account type.


SELECT c.nic
FROM Customers c
WHERE (SELECT COUNT(*) FROM TABLE(c.accounts)) >= 2;


CREATE TYPE Account_t AS OBJECT (
 accNo INTEGER,
 accName VARCHAR2(50),
 balance FLOAT,
 MEMBER FUNCTION compare RETURN INTEGER
) NOT FINAL NOT INSTANTIABLE;
/
CREATE TYPE BODY Account_t AS
 MEMBER FUNCTION compare RETURN INTEGER IS
 BEGIN
 RETURN self.accNo;
 END compare;
END;
/

SELECT a.account.accNo, a.account.accName, a.account.balance
FROM Customers c,
 TABLE(c.accounts) a
ORDER BY a.account.accNo;